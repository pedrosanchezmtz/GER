
	----------------------------Cracion de Types---------------------------------------------
	create or replace TYPE XXER_AR_GET_CASH_CONC_TTYPE 
	AS TABLE OF XXER_AR_GET_CASH_CONC_TYPE;

	create or replace TYPE XXER_AR_GET_CASH_CONC_TYPE AS OBJECT
	(
		   REFERENCE_PAYMENT  VARCHAR2 (50 CHAR),
		   RECEIPT_METHOD      VARCHAR2 (50 CHAR)
	 );
	 
	create or replace TYPE XXER_AR_CASH_TTYPE 
	AS TABLE OF XXER_AR_CASH_TYPE;

	create or replace TYPE XXER_AR_CASH_TYPE AS OBJECT
	(
		   REFERENCE_PAYMENT VARCHAR2 (50 CHAR),
		   PAYMENT_NUMBER  VARCHAR2 (50 CHAR),
		   RECEIPT_METHOD      VARCHAR2 (50 CHAR),
		   TOTAL      NUMBER	   
	 );
	 
	 create or replace TYPE XXER_AR_CONC_TRANSACTION_TTYPE 
	AS TABLE OF XXER_AR_CONC_TRANSACTION_TYPE;

	create or replace TYPE XXER_AR_CONC_TRANSACTION_TYPE AS OBJECT
	(
		   REFERENCE_PAYMENT VARCHAR2 (50 CHAR),
		   RECEIPT_METHOD      VARCHAR2 (50 CHAR),
		   REFERENCE_TRANSACTIONS_ID VARCHAR2 (50 CHAR),
		   REFERENCE_TRANSACTIONS VARCHAR2 (50 CHAR),
		   TOTAL      NUMBER	   
	 );
	 
	 create or replace TYPE XXER_AR_CONCILIACION_RESULT_TTYPE 
	AS TABLE OF XXER_AR_CONCILIACION_RESULT_TYPE;

	create or replace TYPE XXER_AR_CONCILIACION_RESULT_TYPE AS OBJECT
	(
		   REFERENCE_PAYMENT  VARCHAR2 (50 CHAR),
		   RECEIPT_METHOD      VARCHAR2 (50 CHAR),
		   STATUS      VARCHAR2 (50 CHAR)
	 );
	------------------------------Creacion de Secuencias----------------------------------
   CREATE SEQUENCE  "XERINTUSER"."XXER_BANCOS_AMEX_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 50 START WITH 0 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "XERINTUSER"."TMS_CONCILIATION_BANCOS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 50 START WITH 0 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "XERINTUSER"."XXER_AR_CONCILIACION_S"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5774 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

-----------------------------------Creacion de tablas----------------------------------------------
CREATE TABLE TMS_COCILIACION_BANCOS_TBL
(ID                NUMBER NOT NULL ENABLE,
 NO_OPERACION      NUMBER,
 SUCURSAL          VARCHAR2(100),
 REFERENCIA        VARCHAR2(200), 
 USUARIO           VARCHAR2(200),
 USRTRX            VARCHAR2(100),
 TIPO_PAGO         VARCHAR2(50),
 LOTE              NUMBER,
 NOMBRE_ARCHIVO    VARCHAR2(300),
 TARJETA           NUMBER,
 NOMBRE_TH         VARCHAR2(150),
 AUTORIZACION      VARCHAR2(150),
 AFILIACION        NUMBER,
 NOMBRE_AFILIACION VARCHAR2(200),
 IMPORTE           NUMBER,
 MONEDA            VARCHAR2(50),
 FECHA_OPERACION   DATE,
 HORA_OPERACION    VARCHAR2(200),
 TIPO_TARJETA      VARCHAR2(200),
 MARCA_TARJETA     VARCHAR2(50),
 BANCO_EMISOR      VARCHAR2(50),
 TIPO_OPERACION    VARCHAR2(50),
 FECHA_DEPOSITO    DATE, 
 TIPO_BUZON        VARCHAR2(150),
 FECHA_CREACION    DATE 
);

	CREATE TABLE XXER_BANCOS_AMEX_HEADER_TBL
	(
	ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	FECHA_CREACION_ARCHIVO VARCHAR2(20),
	HORA_CREACION_ARCHIVO   VARCHAR2(20),
	NUM_SECUENCIAL          VARCHAR2(20),
	IDENTIDIACION_ARCHIVO   VARCHAR2(20),
	NOMBRE_ARCHIVO          VARCHAR2(40),
	NUM_VERSION_ARCHIVO     VARCHAR2(8),
	SUMA_TOTAL_REGISTROS VARCHAR2(30),
	FECHA_CREACION DATE  DEFAULT sysdate NOT NULL
	);
	CREATE TABLE XXER_BANCOS_AMEX_SUMMARY_TBL
	(
	 ID  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	 ID_HEADER NUMBER NOT NULL ENABLE,
	 IDENTIFICACION_ESTABLECIMIENTO VARCHAR2(30),
	CODIGO_TIPO_CUENTA VARCHAR2(30),
	NUM_PAGO VARCHAR2(30),
	FECHA_PAGO VARCHAR2(30),
	MONEDA_PAGO VARCHAR2(30),
	NUM_UNICO_REFERENCIA_PAGO VARCHAR2(30),
	MONTO_NETO_PAGO VARCHAR2(30),
	MONTO_BRUTO_PAGO VARCHAR2(30),
	MONTO_DESCUENTO VARCHAR2(30),
	MONTO_SERVICIO VARCHAR2(30),
	MONTO_AJUSTE VARCHAR2(30),
	MONTO_IMPUESTOS VARCHAR2(30),
	MONTO_SALDO_DEBITO_INICIAL VARCHAR2(30),
	NUM_DEPOSITO_DIRECTO VARCHAR2(30),
	NUM_CUENTA_BANCARIA VARCHAR2(60),
	NUM_CUENTA_BANCARIA_INTERNACIONAL VARCHAR2(60),
	CODIGO_BANCO VARCHAR2(30),
	FECHA_CREACION DEFAULT sysdate NOT NULL
	);
	CREATE TABLE XXER_BANCOS_AMEX_SUBMISSION_TBL
	(
	 ID   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	 NUM_ESTABLECIMIENTO VARCHAR2(30),
	CODIGO_TIPO_CUENTA VARCHAR2(30),
	NUM_PAGO_AMEX VARCHAR2(30),
	FECHA_PAGO VARCHAR2(30),
	MONEDA_PAGO VARCHAR2(30),
	NUM_ESTABLECIMIENTO_PRESENTION VARCHAR2(30),
	FECHA_ENVIO_COMERCIAL VARCHAR2(30),
	FECHA_PROCESAMIENTO_AMEX VARCHAR2(30),
	NUM_FACTURA VARCHAR2(30),
	MONEDA VARCHAR2(30),
	RELLENO VARCHAR2(30),
	TASA_CAMBIO VARCHAR2(30),
	MONTO_BRUTO_MONEDA_PRESENTACION VARCHAR2(30),
	MONTO_BRUTO_MONEDA_PAGO VARCHAR2(30),
	MONTO_DESCUENTO_RSENTCION VARCHAR2(30),
	MONTO_CARGO_SERVICIO VARCHAR2(30),
	MONTO_IMPUESTO VARCHAR2(30),
	MONTO_NETO VARCHAR2(30),
	TASA_DESCUENTO VARCHAR2(30),
	TASA_IMPUESTO VARCHAR2(30),
	SUMA_TRANSACCIONES VARCHAR2(30),
	IDENTIFICACION_SEGUIMIENTO VARCHAR2(30),
	NUM_CUOTA VARCHAR2(30),
	NUM_ACELERACION VARCHAR2(30),
	FECHA_LIQUIDACION_ORIGINAL VARCHAR2(30),
	FECHA_ACELERACION VARCHAR2(30),
	CANTIDAD_DIAS_ADELANTADOS VARCHAR2(30),
	MONTO_CARGO_ACELERACION VARCHAR2(30),
	MONTO_NETO_CARGO_ACELERACION VARCHAR2(30),
	MONTO_BRUTO_DEBITO VARCHAR2(30),
	MONTO_BRUTO_CREDITO VARCHAR2(30),
	FECHA_CREACION DEFAULT sysdate NOT NULL
	);
	CREATE TABLE XXER_BANCOS_AMEX_TRANSACTN_TBL
	(
	 ID  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	 NUM_ESTABLECIMIENTO VARCHAR2(30),
	CODIGO_TIPO_CUENTA VARCHAR2(30),
	NUM_PAGO_AMEX VARCHAR2(30),
	FECHA_PAGO_AMEX VARCHAR2(30),
	MONEDA_PAGO VARCHAR2(30),
	NUM_ESTABLECIMIENTO2 VARCHAR2(30),
	FECHA_PRESENTACION VARCHAR2(30),
	FECHA_PROCESAMIENTO_AMEX VARCHAR2(30),
	NUM_FACTURA VARCHAR2(30),
	MONEDA_PRESENTACION VARCHAR2(30),
	IDENTIFICACION_UBICACION_ESTABLECIMIENTO VARCHAR2(30),
	NUM_FACTURA_REFERENCIA VARCHAR2(60),
	NUM_VENDEDOR VARCHAR2(30),
	NUM_TARJETA VARCHAR2(30),
	NUM_REFERENCIA_ESPECIFICO_INDUSTRIA VARCHAR2(60),
	MONTO_BRUTO_PRESENTACION VARCHAR2(30),
	MONTO_TRANSACCION VARCHAR2(30),
	FECHA_TRANSACCION VARCHAR2(30),
	HORA_TRANSACCION VARCHAR2(30),
	NUM_TRANSACCION VARCHAR2(30),
	CODIGO_APROBACION VARCHAR2(30),
	NUM_TERMINAL VARCHAR2(30),
	CODIGO_CATEGORIA_ESTABLECIMIENTO VARCHAR2(30),
	NUM_REFERENCIA_SOCIO VARCHAR2(60),
	NUM_REFERENCIA_ADQUIRENTE VARCHAR2(30),
	CODIGO_ERROR_INCUMPLIMIENTO_CALIDAD_DATOS VARCHAR2(30),
	CODIGO_ERROR_INCUMPLIMIENTO_CALIDAD_DATOS1 VARCHAR2(30),
	CODIGO_ERROR_INCUMPLIMIENTO_CALIDAD_DATOS2 VARCHAR2(30),
	CODIGO_ERROR_INCUMPLIMIENTO_CALIDAD_DATOS3 VARCHAR2(30),
	CODIGO_ERROR_INCUMPLIMIENTO_CALIDAD_DATOS4 VARCHAR2(30),
	INDICADOR_LECTURA_BANDA VARCHAR2(30),
	INDICADOR_TRANSACCION_RECHAZADA VARCHAR2(30),
	MONTO_PRIMERA_CUOTA VARCHAR2(30),
	MONTO_CUOTA_SIGUIENTE VARCHAR2(30),
	CANTIDAD_CUOTAS VARCHAR2(30),
	NUM_CUOTA VARCHAR2(30),
	RELLENO VARCHAR2(30),
	MONTO_SERVICIO VARCHAR2(30),
	MONTO_ACELERACION VARCHAR2(30),
	FECHA_CREACION DEFAULT sysdate NOT NULL
	);
	CREATE TABLE XXER_BANCOS_AMEX_CHARGEBACK_TBL
	(
	 ID  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	 NUM_ESTABLECIMIENTO VARCHAR2(30),
	CODIGO_TIPO_CUENTA_ VARCHAR2(30),
	NUM_PAGO_AMEX VARCHAR2(30),
	FECHA_PAGO VARCHAR2(30),
	MONEDA_PAGO VARCHAR2(30),
	NUM_ESTABLECIMIENTO_PRESENTACION VARCHAR2(30),
	FECHA_PRESENTACION VARCHAR2(30),
	UBICACION_ESTABLECIMIENTO VARCHAR2(30),
	NUM_FACTURA_O_REFERENCIA VARCHAR2(60),
	IDENTIFICACION_VENDEDOR VARCHAR2(30),
	NUM_TARJETA VARCHAR2(30),
	NUM_REFERENCIA_INDUSTRIA VARCHAR2(60),
	FECHA_PROCESAMIENTO_AMEX VARCHAR2(30),
	NUM_FACTURA VARCHAR2(30),
	MONEDA_PRESENTACION VARCHAR2(30),
	NUM_CONTRACARGO VARCHAR2(60),
	CODIGO_MOTIVO_CONTRACARGO VARCHAR2(30),
	DESCRIPCION_MOTIVO_CONTRACARGO VARCHAR2(300),
	MONTO_BRUTO VARCHAR2(30),
	MONTO_DESCUENTO VARCHAR2(30),
	MONTO_CARGO_SERVICIO VARCHAR2(30),
	MONTO_IMPUESTO VARCHAR2(30),
	MONTO_NETO VARCHAR2(30),
	TASA_DESCUENTO VARCHAR2(30),
	TASA_CARGO_SERVICIO VARCHAR2(30),
	CODIGO_LOTE VARCHAR2(30),
	CODIGO_FACTURA VARCHAR2(30),
	FECHA_CREACION DEFAULT sysdate NOT NULL
	);
	CREATE TABLE XXER_BANCOS_AMEX_ADJUSTMENT_TBL
	(
	 ID  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	 NUM_ESTABLECIMIENTO VARCHAR2(30),
	CODIGO_TIPO_CUENTA VARCHAR2(30),
	NUM_PAGO_AMEX VARCHAR2(30),
	FECHA_PAGO VARCHAR2(30),
	MONEDA_PAGO VARCHAR2(30),
	NUM_ESTABLECIMIENTO_PRESENTACION VARCHAR2(30),
	FECHA_ENVIO VARCHAR2(30),
	UBICACION_ESTABLECIMIENTO VARCHAR2(30),
	NUM_FACTURA_REFERENCIA VARCHAR2(60),
	IDENTIFICACION_VENDEDOR VARCHAR2(30),
	NUM_TARJETA VARCHAR2(30),
	NUM_REFERENCIA_INDUSTRIA VARCHAR2(60),
	FECHA_PROCESAMIENTO_AMEX VARCHAR2(30),
	NUM_FACTURA VARCHAR2(30),
	MONEDA_PRESENTACION VARCHAR2(30),
	NUM_AJUSTE VARCHAR2(60),
	CODIGO_MOTIVO_AJUSTE VARCHAR2(30),
	DESCRIPCION_MOTIVO_AJUSTE VARCHAR2(300),
	MONTO_BRUTO VARCHAR2(30),
	MONTO_DESCUENTO VARCHAR2(30),
	MONTO_CARGO_SERVICIO VARCHAR2(30),
	MONTO_IMPUESTO VARCHAR2(30),
	MONTO_NETO VARCHAR2(30),
	TASA_DESCUENTO VARCHAR2(30),
	TASA_CARGO_SERVICIO VARCHAR2(30),
	CODIGO_LOTE VARCHAR2(30),
	CODIGO_FACTURA VARCHAR2(30),
	FECHA_CREACION DEFAULT sysdate NOT NULL
 	);
	CREATE TABLE XXER_BANCOS_AMEX_TXNPRICING_TBL
	(
	 ID  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	NUMERO_ESTABLCIMIENTO VARCHAR2(30),
	CODIGO_CUENTA VARCHAR2(30),
	NUM_PAGO_AMEX VARCHAR2(30),
	FECHA_PAGO VARCHAR2(30),
	MONEDA_PAGO VARCHAR2(30),
	NUM_ESTABLECIMENTO_PRESENTACION VARCHAR2(30),
	UBICACION_ESTABLECIMIENTO VARCHAR2(30),
	RELLENO VARCHAR2(30),
	NUM_FACTURA_REFERENCIA VARCHAR2(60),
	NUMERO_VENDEDOR VARCHAR2(30),
	NUM_TARJETA VARCHAR2(30),
	MONTO_TRANSACCION VARCHAR2(30),
	FECHA_TRANSACCION VARCHAR2(30),
	CODIGO_CARGO VARCHAR2(30),
	RELLENO2 VARCHAR2(30),
	MONTO_CARGO VARCHAR2(30),
	TASA_DESCUENTO VARCHAR2(30),
	MONTO_DESCUENTO VARCHAR2(30),
	FECHA_CREACION DEFAULT sysdate NOT NULL
	);
	  CREATE TABLE "XERINTUSER"."XXER_AR_CONCILIACION_TBL" 
   (	"CONCILIACION_ID" NUMBER(18,0) DEFAULT "XERINTUSER"."XXER_AR_CONCILIACION_S"."NEXTVAL" NOT NULL ENABLE, 
	"REFERENCE_PAYMENT" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"PAYMENT_NUMBER" VARCHAR2(50 BYTE), 
	"AMOUNT_TRANSACTIONS" NUMBER, 
	"AMOUNT_PAYMENT" NUMBER, 
	"TOLERANCE" NUMBER, 
	"STATUS" CHAR(3 BYTE), 
	"MSJ_VALIDATION" VARCHAR2(300 BYTE), 
	"REFERENCE_TRANSACTIONS_ID" CLOB, 
	"REFERENCE_TRANSACTIONS" CLOB, 
	"FECHA_CONCILIACION" TIMESTAMP (6), 
	"METODO_RECIBO" VARCHAR2(50 BYTE)
   );
	
	
	
	COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."CONCILIACION_ID" IS 'id de la transaccion ';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."REFERENCE_PAYMENT" IS 'Referencia generada  por la vista';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."PAYMENT_NUMBER" IS 'Referencia obtenida en ERP';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."AMOUNT_TRANSACTIONS" IS 'Sumatoria de transaciones relacionadas';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."AMOUNT_PAYMENT" IS 'Monto de pagos consultados en ERP';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."TOLERANCE" IS 'Diferencia de tolareancia';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."STATUS" IS 'estatus de conciliacion corto';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."MSJ_VALIDATION" IS 'descripcion y msj de la conciliacion';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."REFERENCE_TRANSACTIONS_ID" IS 'id de transaciones relacionados ';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."REFERENCE_TRANSACTIONS" IS 'numeros de documentos y montos de transacion relacionadas al pago.';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."FECHA_CONCILIACION" IS 'Fecha que se realizo la conciliacion.';
   COMMENT ON COLUMN "XERINTUSER"."XXER_AR_CONCILIACION_TBL"."METODO_RECIBO" IS 'Nombre del metodo de recibo con que se concilio el Pago.';
	---------------------------------Alter para tabla puente para subir config-------------------------------------
	
	alter table XXER_CNF_INTERFASE_INGRESOS_AR
  add TOLERANCIA_CONC VARCHAR2(150 BYTE);
  alter table XXER_CNF_INTERFASE_INGRESOS_AR
  add FRECUENCIA_CONC VARCHAR2(150 BYTE);
  alter table XXER_CNF_INTERFASE_INGRESOS_AR
  add SUBFIJO_CONC VARCHAR2(300 BYTE);
  alter table XXER_CNF_INTERFASE_INGRESOS_AR
  add MASCARA_CONC VARCHAR2(200 BYTE);
  alter table XXER_CNF_INTERFASE_INGRESOS_AR
  add PREFIJO_CONC VARCHAR2(300 BYTE);
    alter table XXER_CNF_INTERFASE_INGRESOS_AR
  add CONCILIACION VARCHAR2(100 BYTE);
  alter table XXER_CNF_INTERFASE_INGRESOS_AR
  add METODO_RECIBO VARCHAR2(300 BYTE);
	
	----------------------- Creacion de vista----------------------------------------------
	
  CREATE OR REPLACE FORCE EDITIONABLE VIEW "PXERINTUSER"."XXER_AR_INVOICES_CONCILIACION_V" ("NUMERO_DOCUMENTO", "TOTAL", "TABLA_PUENTE_ID", "RECEIPT_METHOD_ID", "ORGANIZATION_ID", "RFC_ORIGEN", "FRECUENCIA", "METODO_RECIBO", "REFERENCE_PAYMENT", "FECHA_MOVIMIENTO", "UNIDAD_NEGOCIO_ORIGEN", "TOLERANCIA") AS 
  WITH
TXN AS (SELECT H.NUMERO_DOCUMENTO , TRUNC(H.FECHA_MOVIMIENTO) FECHA_MOVIMIENTO , H.NOMBRE_FISCAL_ORIGEN , H.SISTEMA_ORIGEN , H.UNIDAD_NEGOCIO_ORIGEN ,
                                H.TIPO_DOCUMENTO , H.TIPO_MOVIMIENTO , H.SUCURSAL_VENTA , L.ORIGEN_SERVICIO
                               , L.DESTINO_SERVICIO , L.SERVICIO , L.CONCEPTO_MODALIDAD , L.FORMA_PAGO , H.RFC_ORIGEN ,
                               H.ADICIONAL1 , H.ADICIONAL3 , H.ADICIONAL4 , H.ADICIONAL5 , H.ADICIONAL6 , L.TOTAL
                               , H.ADICIONAL7 , H.ADICIONAL8 , H.ADICIONAL9 , H.ADICIONAL10 ,H.TABLA_PUENTE_ID ,L.TABLA_PUENTE_LINEA_ID
                FROM XXER_TBL_PUENTE_HEADER H, XXER_TBL_PUENTE_LINES L WHERE H.TABLA_PUENTE_ID = L.TABLA_PUENTE_ID AND H.SISTEMA_ORIGEN NOT IN ('EAM', 'INV', 'PORTAL')
                                 AND H.TIPO_DOCUMENTO NOT IN ('RECIBO', 'REVERSO RECIBO') )
,CNF AS (SELECT * FROM XXER_CNF_INTERFASE_INGRESOS_AR)
SELECT 
RPC."NUMERO_DOCUMENTO",
RPC."TOTAL",
RPC."TABLA_PUENTE_ID",
RPC."RECEIPT_METHOD_ID",
RPC."ORGANIZATION_ID",
RPC."RFC_ORIGEN",
RPC."FRECUENCIA",
RPC."METODO_RECIBO",
RPC."REFERENCE_PAYMENT",
RPC."FECHA_MOVIMIENTO",
RPC."UNIDAD_NEGOCIO_ORIGEN",
RPC."TOLERANCIA" 
FROM (SELECT
     TXN.NUMERO_DOCUMENTO as NUMERO_DOCUMENTO
    ,TXN.TOTAL AS TOTAL
    ,TXN.TABLA_PUENTE_ID AS TABLA_PUENTE_ID
    ,CNF.FRECUENCIA_CONC AS FRECUENCIA
    ,CNF.METODO_RECIBO AS METODO_RECIBO
    ,CNF.RECEIPT_METHOD_ID
    ,CNF.ORGANIZATION_ID
    ,TXN.RFC_ORIGEN
    ,(CASE
        WHEN SUBSTR(CNF.PREFIJO_CONC,1,4) = 'AFIL' THEN 
          (CASE
          WHEN CNF.FRECUENCIA_CONC = 'S' THEN 
            CNF.PREFIJO_CONC
            ||TO_CHAR(TO_DATE(TXN.FECHA_MOVIMIENTO)+(CASE WHEN TO_CHAR(TO_DATE(TXN.FECHA_MOVIMIENTO),'D') IN (7,6,5) THEN (8- TO_CHAR(TO_DATE(TXN.FECHA_MOVIMIENTO),'D')) ELSE 1 END),CNF.MASCARA_CONC)
            ||CNF.SUBFIJO_CONC
          WHEN CNF.FRECUENCIA_CONC = 'D' THEN 
            CNF.PREFIJO_CONC
            ||TO_CHAR(TO_DATE(TXN.FECHA_MOVIMIENTO)+1,CNF.MASCARA_CONC)
            ||CNF.SUBFIJO_CONC
          ELSE NULL END)
        WHEN CNF.FRECUENCIA_CONC = 'D' THEN CNF.PREFIJO_CONC||TO_CHAR(TXN.FECHA_MOVIMIENTO,CNF.MASCARA_CONC)||CNF.SUBFIJO_CONC
        WHEN CNF.FRECUENCIA_CONC = 'S'
            THEN CNF.PREFIJO_CONC||TO_CHAR(TO_DATE(TXN.FECHA_MOVIMIENTO)+(7- TO_CHAR(TO_DATE(TXN.FECHA_MOVIMIENTO),'D')),CNF.MASCARA_CONC)||CNF.SUBFIJO_CONC
        ELSE NULL END) as REFERENCE_PAYMENT
	,TXN.FECHA_MOVIMIENTO
	,TXN.UNIDAD_NEGOCIO_ORIGEN 
    ,NVL(CNF.TOLERANCIA_CONC,10) AS TOLERANCIA
FROM TXN
    LEFT JOIN CNF ON NVL (TXN.SISTEMA_ORIGEN, 1) = NVL (CNF.SISTEMA_ORIGEN, 1)
         AND NVL (TXN.TIPO_DOCUMENTO, 1) = NVL (CNF.TIPO_DOCUMENTO, 1)
         AND NVL (TXN.TIPO_MOVIMIENTO, 1) = NVL (CNF.TIPO_MOVIMIENTO, 1)
         AND NVL (TXN.RFC_ORIGEN, 1) = DECODE (NVL (CNF.SISTEMA_ORIGEN, 1),'NOMINA', NVL (TXN.RFC_ORIGEN, 1),NVL (CNF.RFC_ORIGEN, 1))
         AND NVL (TXN.SUCURSAL_VENTA, 1) = DECODE (NVL (CNF.SUCURSAL_VENTA, 1),'TODOS', NVL (TXN.SUCURSAL_VENTA, 1),NVL (CNF.SUCURSAL_VENTA, 1))
         AND NVL (TXN.ORIGEN_SERVICIO, 1) = DECODE (NVL (CNF.ORIGEN_SERVICIO, 1),'TODOS', NVL (TXN.ORIGEN_SERVICIO, 1),NVL (CNF.ORIGEN_SERVICIO, 1))
         AND NVL (TXN.DESTINO_SERVICIO, 1) = DECODE (NVL (CNF.DESTINO_SERVICIO, 1),'TODOS', NVL (TXN.DESTINO_SERVICIO, 1),NVL (CNF.DESTINO_SERVICIO, 1))
         AND NVL (TXN.SERVICIO, 1) = DECODE (NVL (CNF.SERVICIO, 1),'TODOS', NVL (TXN.SERVICIO, 1),NVL (CNF.SERVICIO, 1))
         AND NVL (TXN.CONCEPTO_MODALIDAD, 1) = NVL (CNF.CONCEPTO_MODALIDAD, 1)
         AND NVL (TXN.FORMA_PAGO, 1) = DECODE (NVL (CNF.FORMA_PAGO, 1),'TODOS', NVL (TXN.FORMA_PAGO, 1),NVL (CNF.FORMA_PAGO, 1))
         AND NVL (TXN.ADICIONAL1, 1) = NVL (CNF.ADICIONAL1, 1)
         AND NVL (TXN.ADICIONAL3, 1) = NVL (CNF.ADICIONAL3, 1)
         AND NVL (TXN.ADICIONAL4, 1) = NVL (CNF.ADICIONAL4, 1)
         AND NVL (TXN.ADICIONAL5, 1) = NVL (CNF.ADICIONAL5, 1)
         AND NVL (TXN.ADICIONAL6, 1) = NVL (CNF.ADICIONAL6, 1)
         AND NVL (TXN.ADICIONAL7, 1) = NVL (CNF.ADICIONAL7, 1)
         AND NVL (TXN.ADICIONAL8, 1) = NVL (CNF.ADICIONAL8, 1)
         AND NVL (TXN.ADICIONAL9, 1) = NVL (CNF.ADICIONAL9, 1)
         AND NVL (TXN.ADICIONAL10, 1) = NVL (CNF.ADICIONAL10, 1)
		 AND CNF.METODO_RECIBO IS NOT NULL
WHERE CNF.CONCILIACION = 'SI'
) RPC
    LEFT JOIN XXER_AR_CONCILIACION_TBL TCO ON RPC.REFERENCE_PAYMENT = TCO.REFERENCE_PAYMENT AND RPC.METODO_RECIBO = TCO.METODO_RECIBO
WHERE NVL(TCO.STATUS,'NC') != 'C' 
AND TRUNC(RPC.FECHA_MOVIMIENTO)>= TRUNC(ADD_MONTHS(SYSDATE,-1)))
/*TRUNC(RPC.FECHA_MOVIMIENTO)>= TRUNC(TO_DATE('31/05/2021','DD/MM/YYYY')-30)
and RPC.REFERENCE_PAYMENT in ('11052021CAPUT','05052021CAPUT','08052021CAPUT','09052021CAPUT','18052021CAPSETEXT','26052021CAPSETEXT','17052019WTCT','AFIL.-007273370-03052021','AFIL.-009270083-03052021','AFIL.-009270083-04052021','17052019WTCT');
*/
;

	 
	 ----------------------------------------------Cracion de paquete---------------------------------------------	
	create or replace PACKAGE XXER_CONCILIATION_PKG AS 

	 /**
	 * Procedimiento usado para obtener los pagos a conciliar y generar los totales de cada pago en tabla puente
	 */
	 PROCEDURE GET_CONCILIATION_CASH(
	 p_businessUnit   IN VARCHAR2,
	 p_fromDate  IN VARCHAR2,
	 p_paymentReference   IN VARCHAR2,
	 p_metodo_recibo   IN VARCHAR2,
			p_cash_conciliation     OUT XXER_AR_GET_CASH_CONC_TTYPE,
			p_error        OUT NUMBER,
			p_error_desc   OUT VARCHAR2
		);
			 /**
	 * PROCEDIMIENTO PARA OBTENER LA INFORMACION DE LAS TRANSACIONES DESDE TMS PARA SU CONCILIACION 
	 *DEBE EJECUTARSE UNA VEZ AL DIA
	 */
	 PROCEDURE 3(
	 p_businessUnit   IN VARCHAR2,
	 p_fromDate  IN VARCHAR2,
	 p_paymentReference   IN VARCHAR2,
	 p_metodo_recibo   IN VARCHAR2,
			p_error        OUT NUMBER,
			p_error_desc   OUT VARCHAR2
		);
		

	 /**
	 * Procedimiento usado para conciliar los CASH con TRANSACIONES TP
	 */
	 PROCEDURE CONCILIATION_CASH(
			p_cash     IN XXER_AR_CASH_TTYPE,
			p_conciliation_result  OUT XXER_AR_CONCILIACION_RESULT_TTYPE,
			p_error        OUT NUMBER,
			p_error_desc   OUT VARCHAR2
		);


	 /**
	 * Procedimiento usado para conciliar con las  TRANSACCIONES APOLO con TRANSACIONES TP lo que se tiene en CASH
	 */
	 PROCEDURE CONCILIATION_TRANSACTIONS(
			p_transactions     IN XXER_AR_CONC_TRANSACTION_TTYPE,
			p_conciliation_result  OUT XXER_AR_CONCILIACION_RESULT_TTYPE,
			p_error        OUT NUMBER,
			p_error_desc   OUT VARCHAR2
		);
		

	END XXER_CONCILIATION_PKG;
	------------------------------------------Creacion de paquete Body---------------------------------------------
create or replace PACKAGE BODY XXER_CONCILIATION_PKG AS
	 
	 /**
	 *  * Procedimiento usado para obtener los pagos a conciliar y generar los totales de cada pago en tabla puente
	 */
	 PROCEDURE get_conciliation_cash( 
	  p_businessUnit   IN VARCHAR2,
	 p_fromDate  IN VARCHAR2,
	 p_paymentReference   IN VARCHAR2,
	 p_metodo_recibo   IN VARCHAR2,
			p_cash_conciliation     OUT XXER_AR_GET_CASH_CONC_TTYPE,
			p_error        OUT NUMBER,
			p_error_desc   OUT VARCHAR2
		) AS

	--cursor que trae Referencias de los pagos
	CURSOR XXER_AR_INVOICES_CONCILIACION_V_CR  IS
		 SELECT
			  inv.REFERENCE_PAYMENT,
			  inv.METODO_RECIBO
		 FROM XXER_AR_INVOICES_CONCILIACION_V inv
		 where 1=1
		 and TRUNC(inv.FECHA_MOVIMIENTO)>= NVL(TRUNC(TO_DATE(p_fromDate,'DD/MM/YYYY')),TRUNC(ADD_MONTHS(SYSDATE,-1)))
		 and inv.unidad_negocio_origen=NVL(p_businessUnit,inv.unidad_negocio_origen)
		 and inv.reference_payment=NVL(p_paymentReference,inv.reference_payment)
		 and inv.METODO_RECIBO=NVL(p_metodo_recibo,inv.METODO_RECIBO)
		 and SUBSTR(inv.reference_payment,1,4) NOT IN ( 'AFIL')
		 and SUBSTR(inv.reference_payment,1,9) NOT IN ( 'AMEXCO SE')
		 group by 
			  inv.METODO_RECIBO,inv.REFERENCE_PAYMENT; 
			  
	--cursor que trae Referencias de los pagos AFIL SE LIMITA 
	CURSOR XXER_AR_INVOICES_CONCILIACION_AFIL_CR  IS
	 WITH
	VC AS (SELECT inv.REFERENCE_PAYMENT,inv.METODO_RECIBO,TO_DATE(SUBSTR(inv.REFERENCE_PAYMENT, -8,8),'DDMMYYYY') AS FECHA,TO_NUMBER(SUBSTR(inv.REFERENCE_PAYMENT, -18,9)) AS AFIL
		 FROM XXER_AR_INVOICES_CONCILIACION_V inv
		 where 1=1 AND TRUNC(inv.FECHA_MOVIMIENTO)>= NVL(TRUNC(TO_DATE(p_fromDate,'DD/MM/YYYY')),TRUNC(ADD_MONTHS(SYSDATE,-1)))
		 AND NVL(inv.unidad_negocio_origen,1)=NVL(p_businessUnit,inv.unidad_negocio_origen)
		 and inv.reference_payment=NVL(p_paymentReference,inv.reference_payment)
		 AND inv.METODO_RECIBO=NVL(p_metodo_recibo,inv.METODO_RECIBO)
		 AND SUBSTR(inv.reference_payment,1,4) IN ( 'AFIL')
		 group by inv.METODO_RECIBO,inv.REFERENCE_PAYMENT)
		 SELECT VC.REFERENCE_PAYMENT,VC.METODO_RECIBO,AFILIACION,SUM(IMPORTE) AS IMPORTE,TRUNC(FECHA_DEPOSITO) as FECHA_DEPOSITO
					FROM VC INNER JOIN TMS_COCILIACION_BANCOS_TBL ON TRUNC(FECHA_DEPOSITO) = TRUNC(VC.FECHA) AND AFILIACION = VC.AFIL AND USUARIO NOT IN('0670GGZM0')
					GROUP BY  VC.REFERENCE_PAYMENT,VC.METODO_RECIBO,AFILIACION,FECHA_DEPOSITO;
						--cursor que trae Referencias de los pagos AMEXCO SE SE LIMITA 
	CURSOR XXER_AR_INVOICES_CONCILIACION_AMEX_CR  IS
	 WITH
 VC AS (SELECT inv.REFERENCE_PAYMENT,inv.METODO_RECIBO,TO_DATE(SUBSTR(inv.REFERENCE_PAYMENT, -8,8),'DDMMYYYY') AS FECHA,TO_NUMBER(SUBSTR(inv.REFERENCE_PAYMENT, -19,10)) AS AMEX
     FROM XXER_AR_INVOICES_CONCILIACION_V inv
     where 1=1 AND TRUNC(inv.FECHA_MOVIMIENTO)>= NVL(TRUNC(TO_DATE(p_fromDate,'DD/MM/YYYY')),TRUNC(ADD_MONTHS(SYSDATE,-1)))
		 AND NVL(inv.unidad_negocio_origen,1)=NVL(p_businessUnit,inv.unidad_negocio_origen)
		 and inv.reference_payment=NVL(p_paymentReference,inv.reference_payment)
		 AND inv.METODO_RECIBO=NVL(p_metodo_recibo,inv.METODO_RECIBO)
		 AND SUBSTR(inv.reference_payment,1,9) IN ( 'AMEXCO SE')
     group by inv.METODO_RECIBO,inv.REFERENCE_PAYMENT)
select VC.REFERENCE_PAYMENT,VC.METODO_RECIBO,TO_NUMBER(sm.monto_bruto_pago)/100 as Monto_Pago,TO_NUMBER(sm.monto_neto_pago)/100 as Monto_Pago_Neto
FROM  xxer_bancos_amex_summary_tbl sm 
INNER JOIN VC ON sm.identificacion_establecimiento=VC.AMEX AND TO_DATE(SM.FECHA_PAGO,'YYYYMMDD')=TRUNC(VC.FECHA);
					

			v_error_msg        VARCHAR2(300) := NULL;
			v_error_location   VARCHAR2(255);
			v_ReferencePayment VARCHAR2(50) := NULL;
			v_MetodoRecibo     VARCHAR2(50) := NULL;
			v_cash_conciliation  XXER_AR_GET_CASH_CONC_TTYPE:=XXER_AR_GET_CASH_CONC_TTYPE();                      

	BEGIN
			--Recorremos las refenrecias de pagos a conciliar
			FOR v_payments IN XXER_AR_INVOICES_CONCILIACION_V_CR LOOP
					
					v_ReferencePayment:=v_payments.REFERENCE_PAYMENT;
					v_MetodoRecibo:=v_payments.METODO_RECIBO;
				   /* DBMS_OUTPUT.PUT_LINE('v_ReferencePayment: '||v_ReferencePayment||'  v_Metodo_Recibo: '||v_MetodoRecibo||
					'TOLERANCIA: '||v_payments.TOLERANCIA||
					'NUMEROS_DOCUMENTOS: '||v_payments.NUMEROS_DOCUMENTOS||
					'TABLA_PUENTE_IDs: '||v_payments.TABLA_PUENTE_IDs
					);       */    
				  v_cash_conciliation.extend;     
				  v_cash_conciliation(v_cash_conciliation.count):=
				  XXER_AR_GET_CASH_CONC_TYPE(v_ReferencePayment,v_MetodoRecibo);
				  --DBMS_OUTPUT.PUT_LINE('v_ReferencePayment: '||v_ReferencePayment); 
			END LOOP;
			--Recorremos las refenrecias de pagos a conciliar AFIL
			FOR v_payments IN XXER_AR_INVOICES_CONCILIACION_AFIL_CR LOOP
					
					v_ReferencePayment:=v_payments.REFERENCE_PAYMENT;
					v_MetodoRecibo:=v_payments.METODO_RECIBO;
				   /* DBMS_OUTPUT.PUT_LINE('v_ReferencePayment: '||v_ReferencePayment||'  v_Metodo_Recibo: '||v_MetodoRecibo||
					'TOLERANCIA: '||v_payments.TOLERANCIA||
					'NUMEROS_DOCUMENTOS: '||v_payments.NUMEROS_DOCUMENTOS||
					'TABLA_PUENTE_IDs: '||v_payments.TABLA_PUENTE_IDs
					);       */    
				  v_cash_conciliation.extend;     
				  v_cash_conciliation(v_cash_conciliation.count):=
				  XXER_AR_GET_CASH_CONC_TYPE(v_ReferencePayment,v_MetodoRecibo);
				  --DBMS_OUTPUT.PUT_LINE('v_ReferencePayment: '||v_ReferencePayment); 
			END LOOP;
			--Recorremos las refenrecias de pagos a conciliar AMEXCO SE
			FOR v_payments IN XXER_AR_INVOICES_CONCILIACION_AMEX_CR LOOP
					
					v_ReferencePayment:=v_payments.REFERENCE_PAYMENT;
					v_MetodoRecibo:=v_payments.METODO_RECIBO;
				   /* DBMS_OUTPUT.PUT_LINE('v_ReferencePayment: '||v_ReferencePayment||'  v_Metodo_Recibo: '||v_MetodoRecibo||
					'TOLERANCIA: '||v_payments.TOLERANCIA||
					'NUMEROS_DOCUMENTOS: '||v_payments.NUMEROS_DOCUMENTOS||
					'TABLA_PUENTE_IDs: '||v_payments.TABLA_PUENTE_IDs
					);       */    
				  v_cash_conciliation.extend;     
				  v_cash_conciliation(v_cash_conciliation.count):=
				  XXER_AR_GET_CASH_CONC_TYPE(v_ReferencePayment,v_MetodoRecibo);
				  --DBMS_OUTPUT.PUT_LINE('v_ReferencePayment: '||v_ReferencePayment); 
			END LOOP;
			p_cash_conciliation:=v_cash_conciliation;
		  
	--Creamos y ponemos en estatus process
	MERGE INTO XXER_AR_CONCILIACION_TBL c USING ( SELECT
			  inv.REFERENCE_PAYMENT,
			  inv.METODO_RECIBO,
			  max(inv.TOLERANCIA)as TOLERANCIA,
			  sum(inv.TOTAL)as TOTAL,
			  LISTAGG(inv.NUMERO_DOCUMENTO||'_'||inv.TOTAL, ',') WITHIN  GROUP (ORDER BY inv.NUMERO_DOCUMENTO) as NUMEROS_DOCUMENTOS,
			  LISTAGG(inv.TABLA_PUENTE_ID, ',') WITHIN  GROUP (ORDER BY inv.TABLA_PUENTE_ID)as TABLA_PUENTE_IDs
		 FROM XXER_AR_INVOICES_CONCILIACION_V inv
		 where 1=1
		 and TRUNC(inv.FECHA_MOVIMIENTO)>= NVL(TRUNC(TO_DATE(p_fromDate,'DD/MM/YYYY')),TRUNC(ADD_MONTHS(SYSDATE,-1)))
		 and inv.unidad_negocio_origen=NVL(p_businessUnit,inv.unidad_negocio_origen)
		 and inv.reference_payment=NVL(p_paymentReference,inv.reference_payment)
		 and inv.METODO_RECIBO=NVL(p_metodo_recibo,inv.METODO_RECIBO)
		 and SUBSTR(inv.reference_payment,1,4) NOT IN ( 'AFIL')
         and SUBSTR(inv.reference_payment,1,9) NOT IN ( 'AMEXCO SE')
		 group by (
			  inv.REFERENCE_PAYMENT,
			  inv.METODO_RECIBO)) vc
	ON (c.REFERENCE_PAYMENT = vc.REFERENCE_PAYMENT and c.METODO_RECIBO=vc.METODO_RECIBO)
	WHEN MATCHED THEN
	UPDATE SET 
	c.AMOUNT_TRANSACTIONS=vc.TOTAL,
	c.AMOUNT_PAYMENT=null,
	c.STATUS='P',
	c.MSJ_VALIDATION=null,
	c.REFERENCE_TRANSACTIONS_ID=vc.TABLA_PUENTE_IDs,
	c.REFERENCE_TRANSACTIONS=vc.NUMEROS_DOCUMENTOS,
	c.FECHA_CONCILIACION=sysdate
	WHEN NOT MATCHED THEN
	INSERT (REFERENCE_PAYMENT, AMOUNT_TRANSACTIONS, AMOUNT_PAYMENT,TOLERANCE, STATUS, MSJ_VALIDATION, REFERENCE_TRANSACTIONS_ID, REFERENCE_TRANSACTIONS, FECHA_CONCILIACION, METODO_RECIBO)
	VALUES (vc.REFERENCE_PAYMENT,vc.TOTAL,null, vc.TOLERANCIA,'P',null,vc.TABLA_PUENTE_IDs,vc.NUMEROS_DOCUMENTOS,sysdate, vc.METODO_RECIBO);

	commit;
			

	  EXCEPTION
			WHEN OTHERS THEN
				v_error_msg := substr(sqlerrm,1,250);
				p_error := 1;
				p_error_desc := substr('ERROR EN XXER_CONCILIATION_PKG.get_conciliation_cash-'
										 || v_error_location
										 || ' ** '
										 || v_error_msg,1,400);
	END get_conciliation_cash;
		 /**
	 *  * PROCESO QUE OBTIENE LAS CONCILIACIONES DE TMS
	 */
	 PROCEDURE get_conciliation_tms( 
	 p_businessUnit   IN VARCHAR2,
	 p_fromDate  IN VARCHAR2,
	 p_paymentReference   IN VARCHAR2,
	 p_metodo_recibo   IN VARCHAR2,
			p_error        OUT NUMBER,
			p_error_desc   OUT VARCHAR2
		) AS
		
			v_error_msg        VARCHAR2(300) := NULL;
			v_error_location   VARCHAR2(255);
			v_ReferencePayment VARCHAR2(50) := NULL;
			v_MetodoRecibo     VARCHAR2(50) := NULL;
            v_FechaInicio   VARCHAR2(50) := NULL;
            v_FechaFin     VARCHAR2(50) := NULL;

	BEGIN
    
WITH
    VC AS (SELECT inv.REFERENCE_PAYMENT,inv.METODO_RECIBO,max(inv.TOLERANCIA)as TOLERANCIA,TO_DATE(SUBSTR(inv.REFERENCE_PAYMENT, -8,8),'DDMMYYYY') AS FECHA,TO_NUMBER(SUBSTR(inv.REFERENCE_PAYMENT, -18,9)) AS AFIL
         FROM XXER_AR_INVOICES_CONCILIACION_V inv
         where 1=1 
		 and TRUNC(inv.FECHA_MOVIMIENTO)>= NVL(TRUNC(TO_DATE(p_fromDate,'DD/MM/YYYY')),TRUNC(ADD_MONTHS(SYSDATE,-1)))
		 and inv.unidad_negocio_origen=NVL(p_businessUnit,inv.unidad_negocio_origen)
		 and inv.reference_payment=NVL(p_paymentReference,inv.reference_payment)
		 and inv.METODO_RECIBO=NVL(p_metodo_recibo,inv.METODO_RECIBO)
		 AND SUBSTR(inv.reference_payment,1,4) IN ( 'AFIL')
         group by inv.METODO_RECIBO,inv.REFERENCE_PAYMENT),
            CB as (SELECT VC.REFERENCE_PAYMENT,VC.METODO_RECIBO,VC.TOLERANCIA,AFILIACION,IMPORTE,TRUNC(FECHA_DEPOSITO) as FECHA_DEPOSITO,REFERENCIA,NO_OPERACION
                    FROM  VC INNER JOIN TMS_COCILIACION_BANCOS_TBL ON TRUNC(FECHA_DEPOSITO) = TRUNC(VC.FECHA) AND AFILIACION = VC.AFIL AND USUARIO NOT IN('0670GGZM0'))
                    SELECT MAX(CB.FECHA_DEPOSITO)+1,ADD_MONTHS(MIN(CB.FECHA_DEPOSITO),-1)
                    INTO v_FechaFin,v_FechaInicio
                    FROM CB;
                    DBMS_OUTPUT.PUT_LINE('FECHA PARA AFILES'); 
                    DBMS_OUTPUT.PUT_LINE('v_FechaInicio: '||v_FechaInicio); 
                    DBMS_OUTPUT.PUT_LINE('v_FechaFin: '||v_FechaFin); 
                    
	--Creamos y ponemos en estatus process AFIL
	MERGE INTO XXER_AR_CONCILIACION_TBL c USING (WITH
    VC AS (SELECT inv.REFERENCE_PAYMENT,inv.METODO_RECIBO,max(inv.TOLERANCIA)as TOLERANCIA,TO_DATE(SUBSTR(inv.REFERENCE_PAYMENT, -8,8),'DDMMYYYY') AS FECHA,TO_NUMBER(SUBSTR(inv.REFERENCE_PAYMENT, -18,9)) AS AFIL
         FROM XXER_AR_INVOICES_CONCILIACION_V inv
         where 1=1 
		 and TRUNC(inv.FECHA_MOVIMIENTO)>= NVL(TRUNC(TO_DATE(p_fromDate,'DD/MM/YYYY')),TRUNC(ADD_MONTHS(SYSDATE,-1)))
		 and inv.unidad_negocio_origen=NVL(p_businessUnit,inv.unidad_negocio_origen)
		 and inv.reference_payment=NVL(p_paymentReference,inv.reference_payment)
		 and inv.METODO_RECIBO=NVL(p_metodo_recibo,inv.METODO_RECIBO)
		 AND SUBSTR(inv.reference_payment,1,4) IN ( 'AFIL')
         group by inv.METODO_RECIBO,inv.REFERENCE_PAYMENT),
            CB as (SELECT VC.REFERENCE_PAYMENT,VC.METODO_RECIBO,VC.TOLERANCIA,AFILIACION,IMPORTE,TRUNC(FECHA_DEPOSITO) as FECHA_DEPOSITO,REFERENCIA,NO_OPERACION
                    FROM  VC INNER JOIN TMS_COCILIACION_BANCOS_TBL ON TRUNC(FECHA_DEPOSITO) = TRUNC(VC.FECHA) AND AFILIACION = VC.AFIL AND USUARIO NOT IN('0670GGZM0')),
            BV AS(SELECT VE.NUMERO_DOCUMENTO,VE.REFERENCIA
                    ,LISTAGG(VE.FOLIO_PREIMPRESO, ',') WITHIN  GROUP (ORDER BY VE.FOLIO_PREIMPRESO) AS FOLIO_PREIMPRESOS
                    FROM PCENTRAL.EXTRACCION_VENTA_TP_VIEW@PCENTRAL_LINK.ESTRELLAROJA.COM.MX VE
                    WHERE TRUNC(VE.CORTE_FECHA_CREACION) BETWEEN TO_DATE(v_FechaInicio,'DD/MM/YY') AND TO_DATE(v_FechaFin,'DD/MM/YY')
                    AND VE.TIPO_PAGO NOT IN('EFE','AMX') AND  TIPO_OPERACION NOT IN ('HO','FO')
                    GROUP BY VE.NUMERO_DOCUMENTO,VE.REFERENCIA
                    ),
            BVM AS(SELECT VM.NUMERO_DOCUMENTO,SUBSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),1,INSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),';',-2)-1) REFERENCIA_PAGO,LISTAGG(BR.FOLIO_PREIMPRESO, ',') WITHIN  GROUP (ORDER BY BR.FOLIO_PREIMPRESO) AS FOLIO_PREIMPRESOS 
             FROM EXTRACCION_MISCELANEA_TP_VIEW@PCENTRAL_LINK.ESTRELLAROJA.COM.MX VM
             INNER JOIN TMS_CORTES_TBL@PCENTRAL_LINK.ESTRELLAROJA.COM.MX CR
             ON (CR.CORTE_ID = VM.CORTE_ID)
             INNER JOIN TMS_BOLETOS_VENTA_TBL@PCENTRAL_LINK.ESTRELLAROJA.COM.MX VT
             ON (VT.FOLIO_PREIMPRESO = VM.NO_FOLIO 
             AND TRUNC(VT.FECHA_CREACION) BETWEEN TO_DATE(v_FechaInicio,'DD/MM/YY') AND TO_DATE(v_FechaFin,'DD/MM/YY'))
             INNER JOIN TMS_BOLETOS_VENTA_TBL@PCENTRAL_LINK.ESTRELLAROJA.COM.MX BR ON BR.BOLETO_RELACIONADO_ID = VT.BOLETO_ID 
             AND BR.TIPO_PAGO NOT IN ('EFE')
             where 1=1 --AND SUBSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),1,INSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),';',-2)-1)='356087540'
             and  TRUNC(VM.CORTE_FECHA_CREACION) BETWEEN TO_DATE(v_FechaInicio,'DD/MM/YY') AND TO_DATE(v_FechaFin,'DD/MM/YY')
             GROUP BY VM.NUMERO_DOCUMENTO,SUBSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),1,INSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),';',-2)-1)
                    ),          
                      TB AS (SELECT CB.AFILIACION,CB.FECHA_DEPOSITO,sum(CB.IMPORTE)as IMPORTE,BV.NUMERO_DOCUMENTO,HD.TABLA_PUENTE_ID 
                           FROM CB INNER JOIN BV ON CB.REFERENCIA = BV.REFERENCIA
                           LEFT JOIN xxer_tbl_puente_header HD
                              ON  BV.NUMERO_DOCUMENTO =HD.NUMERO_DOCUMENTO
                           GROUP BY CB.AFILIACION,BV.NUMERO_DOCUMENTO,CB.FECHA_DEPOSITO,HD.TABLA_PUENTE_ID
                             UNION ALL
                            SELECT CB.AFILIACION,CB.FECHA_DEPOSITO,sum(CB.IMPORTE)as IMPORTE,BVM.NUMERO_DOCUMENTO,HD.TABLA_PUENTE_ID
                              FROM CB INNER JOIN BVM ON CB.NO_OPERACION = BVM.REFERENCIA_PAGO
                              LEFT JOIN xxer_tbl_puente_header HD
                              ON  BVM.NUMERO_DOCUMENTO =HD.NUMERO_DOCUMENTO
                              GROUP BY CB.AFILIACION,BVM.NUMERO_DOCUMENTO,CB.FECHA_DEPOSITO,HD.TABLA_PUENTE_ID
                              ),
                               BCT AS (SELECT CB.REFERENCE_PAYMENT,CB.METODO_RECIBO,CB.TOLERANCIA,AFILIACION,SUM(IMPORTE) AS IMPORTE,TRUNC(FECHA_DEPOSITO) as FECHA_DEPOSITO FROM CB GROUP BY CB.REFERENCE_PAYMENT,CB.METODO_RECIBO,CB.TOLERANCIA,AFILIACION,FECHA_DEPOSITO)
                              SELECT BCT.REFERENCE_PAYMENT,BCT.METODO_RECIBO,BCT.AFILIACION,BCT.FECHA_DEPOSITO,SUM(TB.IMPORTE) AS IMPORTE_TMS,BCT.IMPORTE AS IMPORTE_BANCO,(SUM(TB.IMPORTE)-BCT.IMPORTE) AS DIFERENCIA,BCT.TOLERANCIA
                              ,LISTAGG(TB.NUMERO_DOCUMENTO||'_'||TB.IMPORTE, ',') WITHIN  GROUP (ORDER BY TB.NUMERO_DOCUMENTO) AS NUMEROS_DOCUMENTOS
                              ,LISTAGG(NVL(TB.TABLA_PUENTE_ID,0), ',') WITHIN  GROUP (ORDER BY TB.TABLA_PUENTE_ID) AS TABLA_PUENTE_IDS
                              FROM TB INNER JOIN BCT ON TRUNC(TB.FECHA_DEPOSITO) = TRUNC(BCT.FECHA_DEPOSITO) AND TB.AFILIACION = BCT.AFILIACION        
                              GROUP BY BCT.FECHA_DEPOSITO,BCT.AFILIACION,BCT.IMPORTE,BCT.REFERENCE_PAYMENT,BCT.METODO_RECIBO,BCT.TOLERANCIA
	) vc
	ON (c.REFERENCE_PAYMENT = vc.REFERENCE_PAYMENT and c.METODO_RECIBO=vc.METODO_RECIBO)
	WHEN MATCHED THEN
	UPDATE SET 
	c.AMOUNT_TRANSACTIONS=vc.IMPORTE_TMS,
	c.AMOUNT_PAYMENT=null,
	c.STATUS='P',
	c.MSJ_VALIDATION=null,
	c.REFERENCE_TRANSACTIONS_ID=vc.TABLA_PUENTE_IDs,
	c.REFERENCE_TRANSACTIONS=vc.NUMEROS_DOCUMENTOS,
	c.FECHA_CONCILIACION=sysdate
	WHEN NOT MATCHED THEN
	INSERT (REFERENCE_PAYMENT, AMOUNT_TRANSACTIONS, AMOUNT_PAYMENT,TOLERANCE, STATUS, MSJ_VALIDATION, REFERENCE_TRANSACTIONS_ID, REFERENCE_TRANSACTIONS, FECHA_CONCILIACION, METODO_RECIBO)
	VALUES (vc.REFERENCE_PAYMENT,vc.IMPORTE_TMS,null, vc.TOLERANCIA,'P',null,vc.TABLA_PUENTE_IDs,vc.NUMEROS_DOCUMENTOS,sysdate, vc.METODO_RECIBO);
	
     WITH
 VC AS (SELECT inv.REFERENCE_PAYMENT,inv.METODO_RECIBO,max(inv.TOLERANCIA)as TOLERANCIA,TO_DATE(SUBSTR(inv.REFERENCE_PAYMENT, -8,8),'DDMMYYYY') AS FECHA,TO_NUMBER(SUBSTR(inv.REFERENCE_PAYMENT, -19,10)) AS AMEX
     FROM XXER_AR_INVOICES_CONCILIACION_V inv
     where 1=1 AND TRUNC(inv.FECHA_MOVIMIENTO)>= TRUNC(inv.FECHA_MOVIMIENTO) AND NVL(inv.unidad_negocio_origen,1)=unidad_negocio_origen
     and inv.reference_payment=inv.reference_payment AND inv.METODO_RECIBO=inv.METODO_RECIBO AND SUBSTR(inv.reference_payment,1,9) IN ( 'AMEXCO SE')
     group by inv.METODO_RECIBO,inv.REFERENCE_PAYMENT),
 CB AS(
select VC.REFERENCE_PAYMENT,VC.METODO_RECIBO,VC.TOLERANCIA,sm.num_pago_amex as Num_Pago,sm.identificacion_establecimiento as Num_Establecimiento,trs.num_factura_referencia as Referencia_Factura,TO_DATE(sm.fecha_pago,'YYYYMMDD')as Fecha_Pago,TO_DATE(trs.fecha_transaccion,'YYYYMMDD')as Fecha_Transaccion,
TO_NUMBER(sm.monto_bruto_pago)/100 as Monto_Pago,TO_NUMBER(sm.monto_neto_pago)/100 as Monto_Pago_Neto,
TO_NUMBER(trs.monto_transaccion)/100 Monto_Trasaccion,trs.moneda_pago as Moneda
from xxer_bancos_amex_header_tbl hd
INNER JOIN  xxer_bancos_amex_summary_tbl sm on hd.id=sm.id_header
INNER JOIN  xxer_bancos_amex_transactn_tbl trs on sm.num_pago_amex=trs.num_pago_amex
--LEFT JOIN  xxer_bancos_amex_adjustment_tbl ajs on sm.num_pago_amex=ajs.num_pago_amex
INNER JOIN VC ON sm.identificacion_establecimiento=VC.AMEX AND TO_DATE(SM.FECHA_PAGO,'YYYYMMDD')=TRUNC(VC.FECHA)
--WHERE --sm.num_pago_amex=2520025031 --AND 
--TO_DATE(sm.fecha_pago,'YYYYMMDD')<TO_DATE('30/09/2021','DD/MM/YYYY')
)SELECT MAX(CB.Fecha_Pago)+1,ADD_MONTHS(MIN(CB.Fecha_Pago),-1)
                    INTO v_FechaFin,v_FechaInicio
                    FROM CB;
    
     DBMS_OUTPUT.PUT_LINE('FECHA PARA AMEX'); 
                    DBMS_OUTPUT.PUT_LINE('v_FechaInicio: '||v_FechaInicio); 
                    DBMS_OUTPUT.PUT_LINE('v_FechaFin: '||v_FechaFin); 
	--Creamos y ponemos en estatus process AMEXCO
	MERGE INTO XXER_AR_CONCILIACION_TBL c USING (
 WITH
 VC AS (SELECT inv.REFERENCE_PAYMENT,inv.METODO_RECIBO,max(inv.TOLERANCIA)as TOLERANCIA,TO_DATE(SUBSTR(inv.REFERENCE_PAYMENT, -8,8),'DDMMYYYY') AS FECHA,TO_NUMBER(SUBSTR(inv.REFERENCE_PAYMENT, -19,10)) AS AMEX
     FROM XXER_AR_INVOICES_CONCILIACION_V inv
     where 1=1 AND TRUNC(inv.FECHA_MOVIMIENTO)>= TRUNC(inv.FECHA_MOVIMIENTO) AND NVL(inv.unidad_negocio_origen,1)=unidad_negocio_origen
     and inv.reference_payment=inv.reference_payment AND inv.METODO_RECIBO=inv.METODO_RECIBO AND SUBSTR(inv.reference_payment,1,9) IN ( 'AMEXCO SE')
     group by inv.METODO_RECIBO,inv.REFERENCE_PAYMENT),
 CB AS(
select VC.REFERENCE_PAYMENT,VC.METODO_RECIBO,VC.TOLERANCIA,sm.num_pago_amex as Num_Pago,sm.identificacion_establecimiento as Num_Establecimiento,trs.num_factura_referencia as Referencia_Factura,TO_DATE(sm.fecha_pago,'YYYYMMDD')as Fecha_Pago,TO_DATE(trs.fecha_transaccion,'YYYYMMDD')as Fecha_Transaccion,
TO_NUMBER(sm.monto_bruto_pago)/100 as Monto_Pago,TO_NUMBER(sm.monto_neto_pago)/100 as Monto_Pago_Neto,
TO_NUMBER(trs.monto_transaccion)/100 Monto_Trasaccion,trs.moneda_pago as Moneda
from xxer_bancos_amex_header_tbl hd
INNER JOIN  xxer_bancos_amex_summary_tbl sm on hd.id=sm.id_header
INNER JOIN  xxer_bancos_amex_transactn_tbl trs on sm.num_pago_amex=trs.num_pago_amex
--LEFT JOIN  xxer_bancos_amex_adjustment_tbl ajs on sm.num_pago_amex=ajs.num_pago_amex
INNER JOIN VC ON sm.identificacion_establecimiento=VC.AMEX AND TO_DATE(SM.FECHA_PAGO,'YYYYMMDD')=TRUNC(VC.FECHA)
--WHERE --sm.num_pago_amex=2520025031 --AND 
--TO_DATE(sm.fecha_pago,'YYYYMMDD')<TO_DATE('30/09/2021','DD/MM/YYYY')
),
BV AS (SELECT REFERENCIA_AMX,NUMERO_DOCUMENTO
 ,LISTAGG(FOLIO_PREIMPRESO_SOLO, ',') WITHIN  GROUP (ORDER BY FOLIO_PREIMPRESO_SOLO) AS FOLIO_PREIMPRESOS
                FROM PCENTRAL.EXTRACCION_VENTA_TP_VIEW@PCENTRAL_LINK.ESTRELLAROJA.COM.MX
                WHERE TRUNC(CORTE_FECHA_CREACION) BETWEEN TO_DATE(v_FechaInicio,'DD/MM/YY') AND TO_DATE(v_FechaFin,'DD/MM/YY')AND TIPO_PAGO != 'EFE'
				AND TIPO_OPERACION NOT IN ('HO','FO') --AND NVL (TO_NUMBER(ADICIONAL17),0) = 0 
				GROUP BY REFERENCIA_AMX,NUMERO_DOCUMENTO
				),
BVM AS(
			 SELECT
	VM.NUMERO_DOCUMENTO,SUBSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO))
,1,INSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),';',-2)-1) REFERENCIA_AMX
	,LISTAGG(BR.FOLIO_PREIMPRESO, ',') WITHIN  GROUP (ORDER BY BR.FOLIO_PREIMPRESO) AS FOLIO_PREIMPRESOS
	FROM EXTRACCION_MISCELANEA_TP_VIEW@PCENTRAL_LINK.ESTRELLAROJA.COM.MX VM
	INNER JOIN TMS_CORTES_TBL@PCENTRAL_LINK.ESTRELLAROJA.COM.MX CR
	ON (CR.CORTE_ID = VM.CORTE_ID)
	INNER JOIN TMS_BOLETOS_VENTA_TBL@PCENTRAL_LINK.ESTRELLAROJA.COM.MX VT
	ON (VT.FOLIO_PREIMPRESO = VM.NO_FOLIO
	AND TRUNC(VT.FECHA_CREACION) BETWEEN TO_DATE(v_FechaInicio,'DD/MM/YY') AND TO_DATE(v_FechaFin,'DD/MM/YY')
	--AND VT.TIPO_TRANSACCION = 'L'
	--AND VT.TIPO_PAGO IN ('BBV','BAB')
	)
	INNER JOIN TMS_BOLETOS_VENTA_TBL@PCENTRAL_LINK.ESTRELLAROJA.COM.MX BR
	ON BR.BOLETO_RELACIONADO_ID = VT.BOLETO_ID AND BR.TIPO_PAGO NOT IN ('EFE')
	where 1=1
	--AND SUBSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),1,INSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),';',-2)-1)='356087540'
	and  TRUNC(VM.CORTE_FECHA_CREACION) BETWEEN TO_DATE(v_FechaInicio,'DD/MM/YY') AND TO_DATE(v_FechaFin,'DD/MM/YY')
	GROUP BY VM.NUMERO_DOCUMENTO,SUBSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO))
,1,INSTR(SUBSTR(BR.REFERENCIA_PAGO,INSTR(BR.REFERENCIA_PAGO,';')+1 ,LENGTH(BR.REFERENCIA_PAGO)),';',-2)-1)
					),
                BT AS (SELECT CB.REFERENCE_PAYMENT,CB.METODO_RECIBO,CB.TOLERANCIA,CB.Num_Pago,CB.Num_Establecimiento,
                CB.Monto_Pago,CB.Monto_Pago_Neto,
                SUM(CB.Monto_Trasaccion) AS Monto_Documento,Fecha_Pago,Fecha_Transaccion,BV.NUMERO_DOCUMENTO,
                LISTAGG(CB.Referencia_Factura, ',') WITHIN  GROUP (ORDER BY CB.Referencia_Factura) AS Referencias_Facturas
                FROM CB INNER JOIN BV ON CB.Referencia_Factura = BV.REFERENCIA_AMX                
                GROUP BY CB.REFERENCE_PAYMENT,CB.METODO_RECIBO,CB.TOLERANCIA,CB.Num_Pago,CB.Num_Establecimiento,Fecha_Transaccion,BV.NUMERO_DOCUMENTO,Monto_Pago,Fecha_Pago,Monto_Pago_Neto
                UNION ALL 
                SELECT CB.REFERENCE_PAYMENT,CB.METODO_RECIBO,CB.TOLERANCIA,CB.Num_Pago,CB.Num_Establecimiento,
                CB.Monto_Pago,CB.Monto_Pago_Neto,
                SUM(CB.Monto_Trasaccion) AS Monto_Documento,Fecha_Pago,Fecha_Transaccion,BVM.NUMERO_DOCUMENTO,
                LISTAGG(CB.Referencia_Factura, ',') WITHIN  GROUP (ORDER BY CB.Referencia_Factura) AS Referencias_Facturas
                FROM CB INNER JOIN BVM ON CB.Referencia_Factura = BVM.REFERENCIA_AMX
                GROUP BY CB.REFERENCE_PAYMENT,CB.METODO_RECIBO,CB.TOLERANCIA,CB.Num_Pago,CB.Num_Establecimiento,Fecha_Transaccion,BVM.NUMERO_DOCUMENTO,Monto_Pago,Fecha_Pago,Monto_Pago_Neto)
                SELECT BT.REFERENCE_PAYMENT,BT.METODO_RECIBO,
				Num_Pago,Num_Establecimiento,
				Monto_Pago,
				Monto_Pago_Neto,
                Monto_Pago-SUM(Monto_Documento) AS DIFERENCIA,
                SUM(Monto_Documento)-(Monto_Pago-Monto_Pago_Neto) AS IMPORTE_TMS,
				BT.TOLERANCIA,
                Fecha_Pago,
               --LISTAGG(BT.Fecha_Transaccion, ',') WITHIN  GROUP (ORDER BY BT.Fecha_Transaccion) AS Fechas_Transacciones,
                LISTAGG(BT.NUMERO_DOCUMENTO||'_'||BT.Monto_Documento, ',') WITHIN  GROUP (ORDER BY BT.NUMERO_DOCUMENTO) AS NUMEROS_DOCUMENTOS,
                LISTAGG(h.tabla_puente_id, ',') WITHIN  GROUP (ORDER BY h.tabla_puente_id) AS TABLA_PUENTE_IDs
                --,LISTAGG(BT.Referencias_Facturas, ',') WITHIN  GROUP (ORDER BY BT.Referencias_Facturas) AS Referencias_Facturas
                FROM BT INNER JOIN xxer_tbl_puente_header h
                      ON BT.NUMERO_DOCUMENTO=H.NUMERO_DOCUMENTO
                GROUP BY BT.REFERENCE_PAYMENT,BT.METODO_RECIBO,BT.TOLERANCIA,BT.Monto_Pago,BT.Monto_Pago_Neto,BT.Fecha_Pago,BT.Num_Establecimiento,BT.Num_Pago
				--ORDER BY DIFERENCIA ASC
	) vc
	ON (c.REFERENCE_PAYMENT = vc.REFERENCE_PAYMENT and c.METODO_RECIBO=vc.METODO_RECIBO)
	WHEN MATCHED THEN
	UPDATE SET 
	c.AMOUNT_TRANSACTIONS=vc.IMPORTE_TMS,
	c.AMOUNT_PAYMENT=null,
	c.STATUS='P',
	c.MSJ_VALIDATION=null,
	c.REFERENCE_TRANSACTIONS_ID=vc.TABLA_PUENTE_IDs,
	c.REFERENCE_TRANSACTIONS=vc.NUMEROS_DOCUMENTOS,
	c.FECHA_CONCILIACION=sysdate
	WHEN NOT MATCHED THEN
	INSERT (REFERENCE_PAYMENT, AMOUNT_TRANSACTIONS, AMOUNT_PAYMENT,TOLERANCE, STATUS, MSJ_VALIDATION, REFERENCE_TRANSACTIONS_ID, REFERENCE_TRANSACTIONS, FECHA_CONCILIACION, METODO_RECIBO)
	VALUES (vc.REFERENCE_PAYMENT,vc.IMPORTE_TMS,null, vc.TOLERANCIA,'P',null,vc.TABLA_PUENTE_IDs,vc.NUMEROS_DOCUMENTOS,sysdate, vc.METODO_RECIBO);

	commit;
			

	  EXCEPTION
			WHEN OTHERS THEN
				v_error_msg := substr(sqlerrm,1,250);
				p_error := 1;
				p_error_desc := substr('ERROR EN XXER_CONCILIATION_PKG.get_conciliation_cash-'
										 || v_error_location
										 || ' ** '
										 || v_error_msg,1,400);
	END get_conciliation_tms;
	  /**
	 * Procedimiento usado para conciliar los CASH con TRANSACIONES TP
	 */
	 PROCEDURE conciliation_cash( 
			p_cash     IN XXER_AR_CASH_TTYPE,
			p_conciliation_result  OUT XXER_AR_CONCILIACION_RESULT_TTYPE,
			p_error        OUT NUMBER,
			p_error_desc   OUT VARCHAR2
		) AS
		


			v_error_msg        VARCHAR2(300) := NULL;
			v_error_location   VARCHAR2(255);
			v_ReferencePayment VARCHAR2(50) := NULL;
			v_MetodoRecibo     VARCHAR2(50) := NULL;
			v_statusCode    VARCHAR2(3) := NULL;
			 v_status      VARCHAR2(255) := NULL;
		   -- p_cash  XXER_AR_CASH_TTYPE:=XXER_AR_CASH_TTYPE();
			v_conciliation_result XXER_AR_CONCILIACION_RESULT_TTYPE:=XXER_AR_CONCILIACION_RESULT_TTYPE();
			
			 --cursor que trae Referencias de los pagos
	CURSOR XXER_AR_TRANSACTIONS_CR IS   
	select c.amount_transactions,
			  c.tolerance
			  from XXER_AR_CONCILIACION_TBL c
			  where 1=1
			  and c.REFERENCE_PAYMENT =v_ReferencePayment
			  and c.METODO_RECIBO =v_MetodoRecibo;
			 
			

	BEGIN
	/*prueba
	p_cash.extend;   
	p_cash(p_cash.count):=XXER_AR_CASH_TYPE('08052021CAPUT','08052021CAPUT9','SANTANDER_3550',368919);
	 p_cash.extend; 
	p_cash(p_cash.count):=XXER_AR_CASH_TYPE('11052021CAPUT','11052021CAPUT4','SANTANDER_3550',339495);
		p_cash.extend; 
	p_cash(p_cash.count):=XXER_AR_CASH_TYPE('26052021CAPSETEXT','26052021CAPSETEXT','SANTANDER_8285',8498);
	*/

	 --Recorremos los pagos en 
			FOR i in p_cash.FIRST..p_cash.LAST LOOP
			  
			  DBMS_OUTPUT.PUT_LINE(p_cash(i).REFERENCE_PAYMENT); 
			  v_ReferencePayment:=p_cash(i).REFERENCE_PAYMENT;
			 v_MetodoRecibo:=p_cash(i).RECEIPT_METHOD;
			  --recorremos el cursor
			  FOR TRANSACTIONS IN XXER_AR_TRANSACTIONS_CR
		   LOOP
		   --conciliamos
			   if p_cash(i).TOTAL=0
				   then v_statusCode:='NC';
				   v_status:='El Pago No se encuentra en APOLO Cash';
			   ELSIF ABS(TRANSACTIONS.amount_transactions - p_cash(i).TOTAL) > TRANSACTIONS.tolerance
					and (TRANSACTIONS.amount_transactions - p_cash(i).TOTAL) > 0
				   then v_statusCode:='NCL';
				   v_status:='EL Pago en Cash es Menor a la sumatoria de las Transaciones en TP';
			   ELSIF ABS(TRANSACTIONS.amount_transactions - p_cash(i).TOTAL) > TRANSACTIONS.tolerance
					and (p_cash(i).TOTAL - TRANSACTIONS.amount_transactions) > 0
				then v_statusCode:='NCM';
				   v_status:='EL Pago en Cash es Mayor a la sumatoria de las Transaciones en TP';
			  else v_statusCode:='C';
				   v_status:='Pago Conciliado Correctamente'; 
				end if;
				   
			 DBMS_OUTPUT.PUT_LINE('Total Transactions: '||TRANSACTIONS.amount_transactions);
			 DBMS_OUTPUT.PUT_LINE('Total CASH: '||p_cash(i).TOTAL);
			 DBMS_OUTPUT.PUT_LINE('Tolerancia: '||TRANSACTIONS.tolerance);
			 DBMS_OUTPUT.PUT_LINE('Diferencia: '||(TRANSACTIONS.amount_transactions - p_cash(i).TOTAL));
			 DBMS_OUTPUT.PUT_LINE('status: '|| v_statusCode);
			 v_conciliation_result.extend;
			 v_conciliation_result(v_conciliation_result.count):=
			 XXER_AR_CONCILIACION_RESULT_TYPE(v_ReferencePayment,v_MetodoRecibo,v_statusCode);
			 
	UPDATE  XXER_AR_CONCILIACION_TBL  SET 
	PAYMENT_NUMBER=p_cash(i).PAYMENT_NUMBER,
	AMOUNT_PAYMENT=p_cash(i).TOTAL,
	TOLERANCE = TRANSACTIONS.tolerance,
	STATUS=v_statusCode,
	MSJ_VALIDATION=v_status
	 where 1=1
	 and REFERENCE_PAYMENT =v_ReferencePayment
	 and METODO_RECIBO=v_MetodoRecibo;
		   commit;         
		   END LOOP;
			END LOOP;
			
		  p_conciliation_result:=v_conciliation_result;
	  EXCEPTION
			WHEN OTHERS THEN
				v_error_msg := substr(sqlerrm,1,250);
				p_error := 1;
				p_error_desc := substr('ERROR EN XXER_CONCILIATION_PKG.conciliation_cash-'
										 || v_error_location
										 || ' ** '
										 || v_error_msg,1,400);	
	END conciliation_cash;
	  /**
	 * Procedimiento usado para conciliar los transacciones APOLO con TRANSACIONES TP y CASH
	 */
	 PROCEDURE conciliation_transactions( 
			 p_transactions     IN XXER_AR_CONC_TRANSACTION_TTYPE,
			p_conciliation_result  OUT XXER_AR_CONCILIACION_RESULT_TTYPE,
			p_error        OUT NUMBER,
			p_error_desc   OUT VARCHAR2
		) AS
		


			v_error_msg        VARCHAR2(300) := NULL;
			v_error_location   VARCHAR2(255);
			v_ReferencePayment VARCHAR2(50) := NULL;
			v_MetodoRecibo     VARCHAR2(50) := NULL;
			v_statusCode    VARCHAR2(3) := NULL;
			 v_status      VARCHAR2(255) := NULL;
			 v_referenceTransactions        VARCHAR2(300) := NULL;
			 v_referenceTransactionsId       VARCHAR2(300) := NULL;
			 v_montoTransactions number;
			--p_transactions  XXER_AR_CONC_TRANSACTION_TTYPE:=XXER_AR_CONC_TRANSACTION_TTYPE();
			v_conciliation_result XXER_AR_CONCILIACION_RESULT_TTYPE:=XXER_AR_CONCILIACION_RESULT_TTYPE();
			
			 --cursor que trae Referencias de los pagos
	CURSOR XXER_AR_TRANSACTIONS_CR IS   
	select c.amount_transactions,
			  c.tolerance,
			  c.reference_transactions_id,
			  c.reference_transactions,
			  c.amount_payment
			  from XXER_AR_CONCILIACION_TBL c
			  where 1=1
			  and c.REFERENCE_PAYMENT =v_ReferencePayment
			  and c.METODO_RECIBO =v_MetodoRecibo;
			 
			

	BEGIN
	/*prueba  
	p_transactions.extend;   
	p_transactions(p_transactions.count):=XXER_AR_CONC_TRANSACTION_TYPE('09052021CAPUT','SANTANDER_8285','300000034987280','4604022',-26);
	 p_transactions.extend; 
	p_transactions(p_transactions.count):=XXER_AR_CONC_TRANSACTION_TYPE('11052021CAPUT','SANTANDER_3550','300000034987243','4605018',-418.01);
	   */


	 --Recorremos los pagos en 
			FOR i in p_transactions.FIRST..p_transactions.LAST LOOP
			  
			  DBMS_OUTPUT.PUT_LINE(p_transactions(i).REFERENCE_PAYMENT); 
			  v_ReferencePayment:=p_transactions(i).REFERENCE_PAYMENT;
			 v_MetodoRecibo:=p_transactions(i).RECEIPT_METHOD;

			  --recorremos el cursor
			  FOR TRANSACTIONS IN XXER_AR_TRANSACTIONS_CR
		   LOOP
		   
			 v_referenceTransactionsId:=p_transactions(i).REFERENCE_TRANSACTIONS_ID||','||TRANSACTIONS.reference_transactions_id;
			 v_referenceTransactions:=p_transactions(i).REFERENCE_TRANSACTIONS||'_'||p_transactions(i).TOTAL||','||TRANSACTIONS.reference_transactions;
			 v_montoTransactions:=(TRANSACTIONS.amount_transactions + p_transactions(i).TOTAL);
		   --conciliamos
			   if TRANSACTIONS.amount_payment=0
				   then v_statusCode:='NC';
				   v_status:='El Pago No se encuentra en APOLO Cash';
			   ELSIF ABS(v_montoTransactions - TRANSACTIONS.amount_payment) > TRANSACTIONS.tolerance
					and (v_montoTransactions - TRANSACTIONS.amount_payment) > 0
				   then v_statusCode:='NCL';
				   v_status:='EL Pago en Cash es Menor a la sumatoria de las Transaciones en TP';
			   ELSIF ABS(v_montoTransactions - TRANSACTIONS.amount_payment) > TRANSACTIONS.tolerance
					and (TRANSACTIONS.amount_payment - v_montoTransactions) > 0
				then v_statusCode:='NCM';
				   v_status:='EL Pago en Cash es Mayor a la sumatoria de las Transaciones en TP';
			  else v_statusCode:='C';
				   v_status:='Pago Conciliado Correctamente'; 
				end if;
				   
			 DBMS_OUTPUT.PUT_LINE('Total Transactions: '||TRANSACTIONS.amount_transactions);
			 DBMS_OUTPUT.PUT_LINE('Total agregar: '||p_transactions(i).TOTAL);
			 DBMS_OUTPUT.PUT_LINE('Tolerancia: '||TRANSACTIONS.tolerance);
			 DBMS_OUTPUT.PUT_LINE('Total en CASH: '||TRANSACTIONS.amount_payment);
			 DBMS_OUTPUT.PUT_LINE('Diferencia: '||(v_montoTransactions-TRANSACTIONS.amount_payment));
			 DBMS_OUTPUT.PUT_LINE('status: '|| v_statusCode);
		  
			 v_conciliation_result.extend;
			 v_conciliation_result(v_conciliation_result.count):=
			 XXER_AR_CONCILIACION_RESULT_TYPE(v_ReferencePayment,v_MetodoRecibo,v_statusCode);
			 
	UPDATE  XXER_AR_CONCILIACION_TBL  SET 
	amount_transactions=v_montoTransactions,
	reference_transactions_id=v_referenceTransactionsId,
	reference_transactions=v_referenceTransactions,
	STATUS=v_statusCode,
	MSJ_VALIDATION=v_status
	 where 1=1
	 and REFERENCE_PAYMENT =v_ReferencePayment
	 and METODO_RECIBO=v_MetodoRecibo;
		   commit;       
		   
		   END LOOP;
			END LOOP;
			
		  p_conciliation_result:=v_conciliation_result;
	  EXCEPTION
			WHEN OTHERS THEN
				v_error_msg := substr(sqlerrm,1,250);
				p_error := 1;
				p_error_desc := substr('ERROR EN XXER_CONCILIATION_PKG.conciliation_transactions-'
										 || v_error_location
										 || ' ** '
										 || v_error_msg,1,400);	
	END conciliation_transactions;

	END XXER_CONCILIATION_PKG;
	


